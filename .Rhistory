root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("income_2", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
print(tree$Get("income_2", "split_point"))
# toLeafNode(c1)
# print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
toLeafNode <- function(node) {
print(node)
data <- c()
}
tree.grow <- function(x, y, nmin, minleaf, nfeat){
store <- Dict$new(items = NULL)
root_split <- get_split(x, y, nfeat)
# Get the attribute names
attributes <- colnames(x)
root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("income_2", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
print(tree$Get("income_2", "split_point"))
# toLeafNode(c1)
# print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
store <- Dict$new(items = NULL)
root_split <- get_split(x, y, nfeat)
# Get the attribute names
attributes <- colnames(x)
root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("child", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
print(tree$Get("child", "split_point"))
# toLeafNode(c1)
# print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
store <- Dict$new(items = NULL)
root_split <- get_split(x, y, nfeat)
# Get the attribute names
attributes <- colnames(x)
root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("child", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
print(tree$Get("child", "split_point"))
# toLeafNode(c1)
print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
store <- Dict$new(items = NULL)
root_split <- get_split(x, y, nfeat)
# Get the attribute names
attributes <- colnames(x)
root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("child", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
print(tree$Get("child"))
# toLeafNode(c1)
print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
store <- Dict$new(items = NULL)
root_split <- get_split(x, y, nfeat)
# Get the attribute names
attributes <- colnames(x)
root_name <- attributes[unlist(root_split[1])]
tree <- Node$new(root_name, split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
c1 <- tree$AddChild("child", split_point = root_split[2], data_l = root_split[3], data_r = root_split[4])
toLeafNode(c1)
print(tree, "split_point", "data_l", "data_r")
# plot(tree)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
toLeafNode <- function(node) {
print(node, "split_point")
data <- c()
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
toLeafNode <- function(node) {
print(node$Get("data_l"))
# data <-
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
# Returns the best split for an attribute of the dataset
best_split <- function(x, y, minleaf) {
parent_i <- impurity.gini(y)
x.sorted <- sort(unique(x))
x.length <- length(x.sorted)
x.splitpoints <- x.sorted[2]
x.splitpoints <- (x.sorted[1:x.length-1]+x.sorted[2:x.length])/2
best_split_point <- 0
best_reduction <- 0
# Loop over the data to determine the best split point based on impurity reduction
for (val in x.splitpoints) {
big_split <- y[x > val]
small_split <- y[x <= val]
big_imp <- impurity.gini(big_split)
small_imp <- impurity.gini(small_split)
reduction_imp = parent_i -(small_imp * (length(small_split)/length(x))+big_imp*(length(big_split)/length(x)))
if (length(small_split) >= minleaf && length(big_split) >= minleaf) {
if (reduction_imp > best_reduction) {
best_split_point <- val
best_reduction <- reduction_imp
best_split_rows = get_x_index(x, best_split_point)
}
}
}
return(list(best_reduction, best_split_point, unlist(best_split_rows[1]), unlist(best_split_rows[2])))
}
# Determine the best split over all of the attributes at a certain node
get_split <- function(x, y, nfeat, minleaf) {
b_gini <- 0
for (i in 1:nfeat){
split <- best_split(x[,i], y, minleaf)
gini <- unlist(split[1])
# The best split is the split with best reduction
if (gini > b_gini){
b_gini <- gini
b_split <- append(i,split[2:4])
}
}
return(b_split)
}
tree.grow <- function(x, y, nmin, minleaf, nfeat){
root <- Node$new('start', data_x = x, data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, minleaf)
split_attribute <- split[1]
split_value <- split[2]
print(split_attribute)
print(split_value)
}
}
}
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/credit.txt', header = TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
x <- credit[x_row, ]
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
print(paste("reduction:", reduction_imp))
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
toLeafNode <- function(node) {
labels <- node$Get('data_y')
print(labels)
# class_label <- which.max(node$Get("data_y"))
# print(class_label)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
print(node)
toLeafNode <- function(node) {
print(node)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
print(node, "data_y")
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
print(node, "data_y")
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
print(node)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
print(node)
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
}
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
print(nodelist)
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
return(root)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
toLeafNode <- function(node) {
print(node$Get("split_attribute"))
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- list(y[left_data])
right_y <- list(y[right_data])
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
# return(root)
}
toLeafNode <- function(node) {
print(node$Get("data_y"))
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
class(leftchild$Get("data_y"))
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y")
# return(root)
}
tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
class(root$Get("data_y"))
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)

source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
print(row)
}
}
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
print(row)
}
}
credit.x_1 <- credit[1:8,1:5]
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/credit.txt', header = TRUE)
credit.y <- credit[,6]
credit.x_1 <- credit[1:8,1:5]
print(credit.x_1)
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/credit.txt', header = TRUE)
credit.y <- credit[,6]
credit.x_1 <- credit[1:8,1:5]
credit.x_2 <- credit[9:10, 1:5]
credit.nfeat <- length(credit.x_1[1,])
tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
tree.grow <- function(x, y, nmin, minleaf, nfeat){
attribute_names = colnames(x)
root <- Node$new('start', data_x = c(1:length(x[,1])), data_y = y)
nodelist <- list(root)
while(length(nodelist) > 0) {
node <- nodelist[[1]]
nodelist[[1]] <- NULL
if (impurity.gini(node$data_y) > 0 && length(node$data_y) >= nmin) {
split <- get_split(node$data_x, node$data_y, nfeat, minleaf)
split_attribute <- split[[1]]
split_value <- split[[2]]
left_data <- split[[3]]
right_data <- split[[4]]
left_y <- y[left_data]
right_y <- y[right_data]
leftchild <- node$AddChild('Bigger', data_x = left_data, data_y = left_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
rightchild <- node$AddChild('Smaller', data_x = right_data, data_y = right_y, split_attribute = attribute_names[split_attribute], split_value = split_value)
nodelist <- c(nodelist, list(leftchild, rightchild))
} else {
toLeafNode(node)
}
}
print(root, 'split_attribute', "split_value", "data_y", "label")
return(root)
}
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
print(row)
}
}
tree <- tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in x) {
print(row)
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
print(x)
y <- NULL
for (row in x) {
print(row)
}
}
tree.classify(credit.x_2, tree)
for (row in x[:,]) {
print(row)
}
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
print(node$children)
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
print(node, "split_attribute")
}
}
tree.classify(credit.x_2, tree)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
credit.x <- credit[1:5]
tree <- tree.grow(credit.x, credit.y, 2, 1, credit.nfeat)
tree <- tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
if (x[row, node$split_attribute] > node$split_value)
node <- node$children[[1]]
} else {
node <- node$children[[2]]
}
node <- NULL
}
}
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
if (x[row, node$split_attribute] > node$split_value) {
node <- node$children[[1]]
} else {
node <- node$children[[2]]
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
if (x[row, node$split_attribute] > node$split_value) {
node <- node$children[[1]]
} else {
node <- node$children[[2]]
}
print(node, "data_y")
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$children[[1]]
} else {
node <- node$children[[2]]
}
print(node, "data_y")
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
print(node, "split_value")
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$children[[1]]
} else {
node <- node$children[[2]]
}
print(node$split_value)
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
print(paste("left child?", node$children[[1]]))
} else {
print(paste("right_child ?:", node$children[[2]]))
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
print(paste("left child?", node$children[1]))
} else {
print(paste("right_child ?:", node$children[2]))
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$children[1]
print(paste("left child?", node))
} else {
print(paste("right_child ?:", node$children[2]))
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
print(paste("left child?", node))
} else {
print(paste("right_child ?:", node$Smaller))
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
print(node)
} else {
print(paste("right_child ?:", node$Smaller))
}
node <- NULL
}
}
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(x[row, node$split_attribute])
print(node$split_value)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
y[row] <- node$label
}
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
y[row] <- node$label
}
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children)) {
print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree <- tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!is.null(node$children[[1]])) {
print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!isLeaf(node)) {
print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!isLeaf(node)) {
# print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree.classify <- function(x, tr) {
y <- NULL
for (row in nrow(x)) {
node <- tr
while(!isLeaf(node)) {
# print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in 1:nrow(x)) {
node <- tr
while(!isLeaf(node)) {
# print(node$children)
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
print(node)
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/credit.txt', header = TRUE)
credit.y <- credit[,6]
credit.y <- credit[,6]
credit.x_1 <- credit[1:10,1:5]
credit.x_2 <- credit[11:12, 1:5]
credit.nfeat <- length(credit.x_1[1,])
tree <- tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
tree.classify(credit.x_2, tree)
tree.classify <- function(x, tr) {
y <- NULL
for (row in 1:nrow(x)) {
node <- tr
while(!isLeaf(node)) {
if (x[row, node$split_attribute] > node$split_value) {
node <- node$Bigger
} else {
node <- node$Smaller
}
}
y[row] <- node$label
}
return(y)
}
tree.classify(credit.x_2, tree)
credit.x_1 <- credit[1:10,1:5]
print(credit.x_1)
credit.y <- credit[1:10,6]
credit.x_1 <- credit[1:10,1:5]
credit.x_2 <- credit[11:12, 1:5]
credit.nfeat <- length(credit.x_1[1,])
tree <- tree.grow(credit.x_1, credit.y, 2, 1, credit.nfeat)
tree.classify(credit.x_2, tree)
# Returns the best split for an attribute of the dataset
best_split <- function(x, x_row, y, minleaf) {
parent_i <- impurity.gini(y)
x.sorted <- sort(unique(x))
x.length <- length(x.sorted)
x.splitpoints <- (x.sorted[1:x.length-1]+x.sorted[2:x.length])/2
best_reduction <- -999
# Loop over the data to determine the best split point based on impurity reduction
for (val in x.splitpoints) {
big_split <- y[x > val]
small_split <- y[x <= val]
big_imp <- impurity.gini(big_split)
small_imp <- impurity.gini(small_split)
reduction_imp = parent_i -(small_imp * (length(small_split)/length(x))+big_imp*(length(big_split)/length(x)))
if (length(small_split) >= minleaf && length(big_split) >= minleaf) {
if (reduction_imp > best_reduction) {
best_split_point <- val
best_reduction <- reduction_imp
best_split_rows <- list(x_row[x > val], x_row[x <= val])
}
}
}
if (best_split_point == -999) {
return(NULL)
}
return(list(best_reduction, best_split_point, unlist(best_split_rows[1]), unlist(best_split_rows[2])))
}
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/eclipse-metrics-packages-2.0.csv', header = TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/eclipse-metrics-packages-2.0.csv')
print(credit)
credit <- read.csv('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/eclipse-metrics-packages-2.0.csv', header = TRUE)
print(credit[, 1])
credit <- read.csv2('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/eclipse-metrics-packages-2.0.csv', header = TRUE)
print(credit)
print(credit[,1])
print(credit)
print(credit[1,])
credit <- read.csv2('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/eclipse-metrics-packages-2.0.csv', header = FALSE)
credit <- subset(credit, select = -c(1,2))
print(credit)
credit <- credit[-c(1,2)]
print(credit)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
source('C:/Users/Lisa/Desktop/UU/Data_Mining_2019/Assignment_1_code.R', echo=TRUE)
